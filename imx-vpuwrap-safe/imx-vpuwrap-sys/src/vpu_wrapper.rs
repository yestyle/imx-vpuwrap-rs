/* automatically generated by rust-bindgen 0.63.0 */

pub const VPU_WRAPPER_HAS_PIC_ID: u32 = 1;
pub const VPU_DEC_MAX_NUM_MEM_REQS: u32 = 2;
pub type VpuDecHandle = *mut ::core::ffi::c_void;
pub const VpuType_VPU_TYPE_UNKNOWN: VpuType = 0;
pub const VpuType_VPU_TYPE_CHIPSMEDIA: VpuType = 1;
pub const VpuType_VPU_TYPE_MALONE: VpuType = 2;
pub const VpuType_VPU_TYPE_HANTRO: VpuType = 3;
pub type VpuType = ::core::ffi::c_uint;
pub const VpuDecErrInfo_VPU_DEC_ERR_UNFOUND: VpuDecErrInfo = 0;
pub const VpuDecErrInfo_VPU_DEC_ERR_NOT_SUPPORTED: VpuDecErrInfo = 1;
pub const VpuDecErrInfo_VPU_DEC_ERR_CORRUPT: VpuDecErrInfo = 2;
pub type VpuDecErrInfo = ::core::ffi::c_uint;
pub const VpuCodStd_VPU_V_MPEG4: VpuCodStd = 0;
pub const VpuCodStd_VPU_V_DIVX3: VpuCodStd = 1;
pub const VpuCodStd_VPU_V_DIVX4: VpuCodStd = 2;
pub const VpuCodStd_VPU_V_DIVX56: VpuCodStd = 3;
pub const VpuCodStd_VPU_V_XVID: VpuCodStd = 4;
pub const VpuCodStd_VPU_V_H263: VpuCodStd = 5;
pub const VpuCodStd_VPU_V_AVC: VpuCodStd = 6;
pub const VpuCodStd_VPU_V_AVC_MVC: VpuCodStd = 7;
pub const VpuCodStd_VPU_V_VC1: VpuCodStd = 8;
pub const VpuCodStd_VPU_V_VC1_AP: VpuCodStd = 9;
pub const VpuCodStd_VPU_V_MPEG2: VpuCodStd = 10;
pub const VpuCodStd_VPU_V_RV: VpuCodStd = 11;
pub const VpuCodStd_VPU_V_MJPG: VpuCodStd = 12;
pub const VpuCodStd_VPU_V_AVS: VpuCodStd = 13;
pub const VpuCodStd_VPU_V_VP8: VpuCodStd = 14;
pub const VpuCodStd_VPU_V_VP9: VpuCodStd = 15;
pub const VpuCodStd_VPU_V_HEVC: VpuCodStd = 16;
pub const VpuCodStd_VPU_V_SORENSON: VpuCodStd = 17;
pub const VpuCodStd_VPU_V_VP6: VpuCodStd = 18;
pub const VpuCodStd_VPU_V_WEBP: VpuCodStd = 19;
pub type VpuCodStd = ::core::ffi::c_uint;
pub const VpuDecSkipMode_VPU_DEC_SKIPNONE: VpuDecSkipMode = 0;
pub const VpuDecSkipMode_VPU_DEC_SKIPPB: VpuDecSkipMode = 1;
pub const VpuDecSkipMode_VPU_DEC_SKIPB: VpuDecSkipMode = 2;
pub const VpuDecSkipMode_VPU_DEC_SKIPALL: VpuDecSkipMode = 3;
pub const VpuDecSkipMode_VPU_DEC_ISEARCH: VpuDecSkipMode = 4;
pub type VpuDecSkipMode = ::core::ffi::c_uint;
pub const VpuDecInputType_VPU_DEC_IN_NORMAL: VpuDecInputType = 0;
pub const VpuDecInputType_VPU_DEC_IN_KICK: VpuDecInputType = 1;
pub const VpuDecInputType_VPU_DEC_IN_DRAIN: VpuDecInputType = 2;
pub type VpuDecInputType = ::core::ffi::c_uint;
pub const VpuDecConfig_VPU_DEC_CONF_SKIPMODE: VpuDecConfig = 0;
pub const VpuDecConfig_VPU_DEC_CONF_INPUTTYPE: VpuDecConfig = 1;
pub const VpuDecConfig_VPU_DEC_CONF_BUFDELAY: VpuDecConfig = 2;
pub const VpuDecConfig_VPU_DEC_CONF_INIT_CNT_THRESHOLD: VpuDecConfig = 3;
pub const VpuDecConfig_VPU_DEC_CONF_ENABLE_TILED: VpuDecConfig = 4;
pub const VpuDecConfig_VPU_DEC_CONF_RESET_CODECDATA: VpuDecConfig = 5;
pub type VpuDecConfig = ::core::ffi::c_uint;
pub const VpuDecRetCode_VPU_DEC_RET_SUCCESS: VpuDecRetCode = 0;
pub const VpuDecRetCode_VPU_DEC_RET_FAILURE: VpuDecRetCode = 1;
pub const VpuDecRetCode_VPU_DEC_RET_INVALID_PARAM: VpuDecRetCode = 2;
pub const VpuDecRetCode_VPU_DEC_RET_INVALID_HANDLE: VpuDecRetCode = 3;
pub const VpuDecRetCode_VPU_DEC_RET_INVALID_FRAME_BUFFER: VpuDecRetCode = 4;
pub const VpuDecRetCode_VPU_DEC_RET_INSUFFICIENT_FRAME_BUFFERS: VpuDecRetCode = 5;
pub const VpuDecRetCode_VPU_DEC_RET_INVALID_STRIDE: VpuDecRetCode = 6;
pub const VpuDecRetCode_VPU_DEC_RET_WRONG_CALL_SEQUENCE: VpuDecRetCode = 7;
pub const VpuDecRetCode_VPU_DEC_RET_FAILURE_TIMEOUT: VpuDecRetCode = 8;
pub type VpuDecRetCode = ::core::ffi::c_uint;
pub const VpuDecBufRetCode_VPU_DEC_INPUT_NOT_USED: VpuDecBufRetCode = 0;
pub const VpuDecBufRetCode_VPU_DEC_INPUT_USED: VpuDecBufRetCode = 1;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_EOS: VpuDecBufRetCode = 2;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_DIS: VpuDecBufRetCode = 4;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_NODIS: VpuDecBufRetCode = 8;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_REPEAT: VpuDecBufRetCode = 16;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_DROPPED: VpuDecBufRetCode = 32;
pub const VpuDecBufRetCode_VPU_DEC_OUTPUT_MOSAIC_DIS: VpuDecBufRetCode = 64;
pub const VpuDecBufRetCode_VPU_DEC_NO_ENOUGH_BUF: VpuDecBufRetCode = 128;
pub const VpuDecBufRetCode_VPU_DEC_NO_ENOUGH_INBUF: VpuDecBufRetCode = 256;
pub const VpuDecBufRetCode_VPU_DEC_INIT_OK: VpuDecBufRetCode = 512;
pub const VpuDecBufRetCode_VPU_DEC_SKIP: VpuDecBufRetCode = 1024;
pub const VpuDecBufRetCode_VPU_DEC_ONE_FRM_CONSUMED: VpuDecBufRetCode = 2048;
pub const VpuDecBufRetCode_VPU_DEC_RESOLUTION_CHANGED: VpuDecBufRetCode = 4096;
pub const VpuDecBufRetCode_VPU_DEC_FLUSH: VpuDecBufRetCode = 2147483648;
pub type VpuDecBufRetCode = ::core::ffi::c_uint;
pub const VpuDecCapability_VPU_DEC_CAP_FILEMODE: VpuDecCapability = 0;
pub const VpuDecCapability_VPU_DEC_CAP_TILE: VpuDecCapability = 1;
pub const VpuDecCapability_VPU_DEC_CAP_FRAMESIZE: VpuDecCapability = 2;
pub const VpuDecCapability_VPU_DEC_CAP_RESOLUTION_CHANGE: VpuDecCapability = 3;
pub type VpuDecCapability = ::core::ffi::c_uint;
pub const VpuMemType_VPU_MEM_VIRT: VpuMemType = 0;
pub const VpuMemType_VPU_MEM_PHY: VpuMemType = 1;
pub type VpuMemType = ::core::ffi::c_uint;
pub const VpuPicType_VPU_I_PIC: VpuPicType = 0;
pub const VpuPicType_VPU_P_PIC: VpuPicType = 1;
pub const VpuPicType_VPU_B_PIC: VpuPicType = 2;
pub const VpuPicType_VPU_IDR_PIC: VpuPicType = 3;
pub const VpuPicType_VPU_BI_PIC: VpuPicType = 4;
pub const VpuPicType_VPU_SKIP_PIC: VpuPicType = 5;
pub const VpuPicType_VPU_UNKNOWN_PIC: VpuPicType = 6;
pub type VpuPicType = ::core::ffi::c_uint;
pub const VpuFieldType_VPU_FIELD_NONE: VpuFieldType = 0;
pub const VpuFieldType_VPU_FIELD_TOP: VpuFieldType = 1;
pub const VpuFieldType_VPU_FIELD_BOTTOM: VpuFieldType = 2;
pub const VpuFieldType_VPU_FIELD_TB: VpuFieldType = 3;
pub const VpuFieldType_VPU_FIELD_BT: VpuFieldType = 4;
pub const VpuFieldType_VPU_FIELD_UNKNOWN: VpuFieldType = 5;
pub type VpuFieldType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuMemSubBlockInfo {
    pub nAlignment: ::core::ffi::c_int,
    pub nSize: ::core::ffi::c_int,
    pub MemType: VpuMemType,
    pub pVirtAddr: *mut ::core::ffi::c_uchar,
    pub pPhyAddr: *mut ::core::ffi::c_uchar,
    pub nFd: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuMemInfo {
    pub nSubBlockNum: ::core::ffi::c_int,
    pub MemSubBlock: [VpuMemSubBlockInfo; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuVersionInfo {
    pub nFwMajor: ::core::ffi::c_int,
    pub nFwMinor: ::core::ffi::c_int,
    pub nFwRelease: ::core::ffi::c_int,
    pub nFwCode: ::core::ffi::c_int,
    pub nLibMajor: ::core::ffi::c_int,
    pub nLibMinor: ::core::ffi::c_int,
    pub nLibRelease: ::core::ffi::c_int,
    pub nReserved: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuWrapperVersionInfo {
    pub nMajor: ::core::ffi::c_int,
    pub nMinor: ::core::ffi::c_int,
    pub nRelease: ::core::ffi::c_int,
    pub pBinary: *mut ::core::ffi::c_char,
    pub nReserved: [::core::ffi::c_int; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuDecOpenParam {
    pub CodecFormat: VpuCodStd,
    pub nReorderEnable: ::core::ffi::c_int,
    pub nChromaInterleave: ::core::ffi::c_int,
    pub nMapType: ::core::ffi::c_int,
    pub nTiled2LinearEnable: ::core::ffi::c_int,
    pub nPicWidth: ::core::ffi::c_int,
    pub nPicHeight: ::core::ffi::c_int,
    pub nEnableFileMode: ::core::ffi::c_int,
    pub nEnableVideoCompressor: ::core::ffi::c_int,
    pub nPixelFormat: ::core::ffi::c_int,
    pub nAdaptiveMode: ::core::ffi::c_int,
    pub pAppCxt: *mut ::core::ffi::c_void,
    pub nSecureMode: ::core::ffi::c_int,
    pub nSecureBufferAllocSize: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuFrameBuffer {
    pub nBufferId: ::core::ffi::c_int,
    pub nStrideY: ::core::ffi::c_uint,
    pub nStrideC: ::core::ffi::c_uint,
    pub pbufY: *mut ::core::ffi::c_uchar,
    pub pbufCb: *mut ::core::ffi::c_uchar,
    pub pbufCr: *mut ::core::ffi::c_uchar,
    pub pbufMvCol: *mut ::core::ffi::c_uchar,
    pub pbufY_tilebot: *mut ::core::ffi::c_uchar,
    pub pbufCb_tilebot: *mut ::core::ffi::c_uchar,
    pub pbufVirtY: *mut ::core::ffi::c_uchar,
    pub pbufVirtCb: *mut ::core::ffi::c_uchar,
    pub pbufVirtCr: *mut ::core::ffi::c_uchar,
    pub pbufVirtMvCol: *mut ::core::ffi::c_uchar,
    pub pbufVirtY_tilebot: *mut ::core::ffi::c_uchar,
    pub pbufVirtCb_tilebot: *mut ::core::ffi::c_uchar,
    pub nIonFd: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 5usize],
    pub pPrivate: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuRect {
    pub nLeft: ::core::ffi::c_uint,
    pub nTop: ::core::ffi::c_uint,
    pub nRight: ::core::ffi::c_uint,
    pub nBottom: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuHDR10Meta {
    pub redPrimary: [::core::ffi::c_uint; 2usize],
    pub greenPrimary: [::core::ffi::c_uint; 2usize],
    pub bluePrimary: [::core::ffi::c_uint; 2usize],
    pub whitePoint: [::core::ffi::c_uint; 2usize],
    pub maxMasteringLuminance: ::core::ffi::c_uint,
    pub minMasteringLuminance: ::core::ffi::c_uint,
    pub maxContentLightLevel: ::core::ffi::c_uint,
    pub maxFrameAverageLightLevel: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuColourDesc {
    pub colourPrimaries: ::core::ffi::c_uint,
    pub transferCharacteristics: ::core::ffi::c_uint,
    pub matrixCoeffs: ::core::ffi::c_uint,
    pub fullRange: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuChromaLocInfo {
    pub chromaSampleLocTypeTopField: ::core::ffi::c_uint,
    pub chromaSampleLocTypeBottomField: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuDecInitInfo {
    pub nPicWidth: ::core::ffi::c_int,
    pub nPicHeight: ::core::ffi::c_int,
    pub nFrameRateRes: ::core::ffi::c_int,
    pub nFrameRateDiv: ::core::ffi::c_int,
    pub PicCropRect: VpuRect,
    pub nMinFrameBufferCount: ::core::ffi::c_int,
    pub nMjpgSourceFormat: ::core::ffi::c_int,
    pub nInterlace: ::core::ffi::c_int,
    pub nQ16ShiftWidthDivHeightRatio: ::core::ffi::c_uint,
    pub nConsumedByte: ::core::ffi::c_int,
    pub nAddressAlignment: ::core::ffi::c_int,
    pub nFrameSize: ::core::ffi::c_int,
    pub nBitDepth: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 3usize],
    pub pSpecialInfo: *mut ::core::ffi::c_void,
    pub hasColorDesc: ::core::ffi::c_int,
    pub hasHdr10Meta: ::core::ffi::c_int,
    pub Hdr10Meta: VpuHDR10Meta,
    pub ColourDesc: VpuColourDesc,
    pub ChromaLocInfo: VpuChromaLocInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuFrameExtInfo {
    pub nFrmWidth: ::core::ffi::c_int,
    pub nFrmHeight: ::core::ffi::c_int,
    pub FrmCropRect: VpuRect,
    pub nQ16ShiftWidthDivHeightRatio: ::core::ffi::c_uint,
    pub rfc_luma_offset: ::core::ffi::c_int,
    pub rfc_chroma_offset: ::core::ffi::c_int,
    pub nPicId: [::core::ffi::c_int; 2usize],
    pub nReserved: [::core::ffi::c_int; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuDecOutFrameInfo {
    pub pDisplayFrameBuf: *mut VpuFrameBuffer,
    pub ePicType: VpuPicType,
    pub eFieldType: VpuFieldType,
    pub nMVCViewID: ::core::ffi::c_int,
    pub pExtInfo: *mut VpuFrameExtInfo,
    pub nReserved: [::core::ffi::c_int; 2usize],
    pub pPrivate: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuCodecData {
    pub pData: *mut ::core::ffi::c_uchar,
    pub nSize: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuBufferNode {
    pub pPhyAddr: *mut ::core::ffi::c_uchar,
    pub pVirAddr: *mut ::core::ffi::c_uchar,
    pub nSize: ::core::ffi::c_uint,
    pub sCodecData: VpuCodecData,
    pub nPicId: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 1usize],
    pub pPrivate: *mut ::core::ffi::c_void,
}
pub const VpuMemDescType_VPU_MEM_DESC_NORMAL: VpuMemDescType = 0;
pub const VpuMemDescType_VPU_MEM_DESC_SECURE: VpuMemDescType = 1;
pub type VpuMemDescType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuMemDesc {
    pub nSize: ::core::ffi::c_int,
    #[doc = "requested memory size"]
    pub nPhyAddr: ::core::ffi::c_ulong,
    #[doc = "physical memory address allocated"]
    pub nCpuAddr: ::core::ffi::c_ulong,
    #[doc = "cpu addr for system free usage"]
    pub nVirtAddr: ::core::ffi::c_ulong,
    #[doc = "virtual user space address"]
    pub nType: VpuMemDescType,
    pub nReserved: [::core::ffi::c_int; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuDecFrameLengthInfo {
    pub pFrame: *mut VpuFrameBuffer,
    pub nStuffLength: ::core::ffi::c_int,
    pub nFrameLength: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 5usize],
}
#[doc = " encoder part"]
pub type VpuEncHandle = *mut ::core::ffi::c_void;
pub const VpuColorFormat_VPU_COLOR_420: VpuColorFormat = 0;
pub const VpuColorFormat_VPU_COLOR_422H: VpuColorFormat = 1;
pub const VpuColorFormat_VPU_COLOR_422V: VpuColorFormat = 2;
pub const VpuColorFormat_VPU_COLOR_444: VpuColorFormat = 3;
pub const VpuColorFormat_VPU_COLOR_400: VpuColorFormat = 4;
pub const VpuColorFormat_VPU_COLOR_422YUYV: VpuColorFormat = 13;
pub const VpuColorFormat_VPU_COLOR_422UYVY: VpuColorFormat = 14;
pub const VpuColorFormat_VPU_COLOR_ARGB8888: VpuColorFormat = 15;
pub const VpuColorFormat_VPU_COLOR_BGRA8888: VpuColorFormat = 16;
pub const VpuColorFormat_VPU_COLOR_RGB565: VpuColorFormat = 17;
pub const VpuColorFormat_VPU_COLOR_RGB555: VpuColorFormat = 18;
pub const VpuColorFormat_VPU_COLOR_BGR565: VpuColorFormat = 19;
pub type VpuColorFormat = ::core::ffi::c_uint;
pub const VpuEncMirrorDirection_VPU_ENC_MIRDIR_NONE: VpuEncMirrorDirection = 0;
pub const VpuEncMirrorDirection_VPU_ENC_MIRDIR_VER: VpuEncMirrorDirection = 1;
pub const VpuEncMirrorDirection_VPU_ENC_MIRDIR_HOR: VpuEncMirrorDirection = 2;
pub const VpuEncMirrorDirection_VPU_ENC_MIRDIR_HOR_VER: VpuEncMirrorDirection = 3;
pub type VpuEncMirrorDirection = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncInitInfo {
    pub nMinFrameBufferCount: ::core::ffi::c_int,
    pub nAddressAlignment: ::core::ffi::c_int,
    pub eType: VpuType,
}
pub const VpuEncRetCode_VPU_ENC_RET_SUCCESS: VpuEncRetCode = 0;
pub const VpuEncRetCode_VPU_ENC_RET_FAILURE: VpuEncRetCode = 1;
pub const VpuEncRetCode_VPU_ENC_RET_INVALID_PARAM: VpuEncRetCode = 2;
pub const VpuEncRetCode_VPU_ENC_RET_INVALID_HANDLE: VpuEncRetCode = 3;
pub const VpuEncRetCode_VPU_ENC_RET_INVALID_FRAME_BUFFER: VpuEncRetCode = 4;
pub const VpuEncRetCode_VPU_ENC_RET_INSUFFICIENT_FRAME_BUFFERS: VpuEncRetCode = 5;
pub const VpuEncRetCode_VPU_ENC_RET_INVALID_STRIDE: VpuEncRetCode = 6;
pub const VpuEncRetCode_VPU_ENC_RET_WRONG_CALL_SEQUENCE: VpuEncRetCode = 7;
pub const VpuEncRetCode_VPU_ENC_RET_FAILURE_TIMEOUT: VpuEncRetCode = 8;
pub type VpuEncRetCode = ::core::ffi::c_uint;
pub const VpuEncBufRetCode_VPU_ENC_INPUT_NOT_USED: VpuEncBufRetCode = 0;
pub const VpuEncBufRetCode_VPU_ENC_INPUT_USED: VpuEncBufRetCode = 1;
pub const VpuEncBufRetCode_VPU_ENC_OUTPUT_SEQHEADER: VpuEncBufRetCode = 4;
pub const VpuEncBufRetCode_VPU_ENC_OUTPUT_DIS: VpuEncBufRetCode = 8;
pub const VpuEncBufRetCode_VPU_ENC_OUTPUT_NODIS: VpuEncBufRetCode = 16;
pub type VpuEncBufRetCode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuIsoColorAspects {
    pub nColourDescPresentFlag: ::core::ffi::c_int,
    pub nPrimaries: ::core::ffi::c_int,
    pub nTransfer: ::core::ffi::c_int,
    pub nMatrixCoeffs: ::core::ffi::c_int,
    pub nVideoSignalPresentFlag: ::core::ffi::c_int,
    pub nFullRange: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncOpenParamSimp {
    pub eFormat: VpuCodStd,
    pub nPicWidth: ::core::ffi::c_int,
    pub nPicHeight: ::core::ffi::c_int,
    pub nOrigWidth: ::core::ffi::c_int,
    pub nOrigHeight: ::core::ffi::c_int,
    pub nRotAngle: ::core::ffi::c_int,
    pub nFrameRate: ::core::ffi::c_int,
    pub nBitRate: ::core::ffi::c_int,
    pub nGOPSize: ::core::ffi::c_int,
    pub nColorConversionType: ::core::ffi::c_int,
    pub nStreamSliceCount: ::core::ffi::c_int,
    pub nIntraRefresh: ::core::ffi::c_int,
    pub nIntraQP: ::core::ffi::c_int,
    pub nUserQpMax: ::core::ffi::c_int,
    pub nUserQpMin: ::core::ffi::c_int,
    pub nChromaInterleave: ::core::ffi::c_int,
    pub sMirror: VpuEncMirrorDirection,
    pub nMapType: ::core::ffi::c_int,
    pub nLinear2TiledEnable: ::core::ffi::c_int,
    pub eColorFormat: VpuColorFormat,
    pub nIsAvcc: ::core::ffi::c_int,
    pub sColorAspects: VpuIsoColorAspects,
    pub nReserved: [::core::ffi::c_int; 3usize],
    pub pAppCxt: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncSliceMode {
    pub sliceMode: ::core::ffi::c_int,
    pub sliceSizeMode: ::core::ffi::c_int,
    pub sliceSize: ::core::ffi::c_int,
    pub nReserved: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncMp4Param {
    pub mp4_dataPartitionEnable: ::core::ffi::c_int,
    pub mp4_reversibleVlcEnable: ::core::ffi::c_int,
    pub mp4_intraDcVlcThr: ::core::ffi::c_int,
    pub mp4_hecEnable: ::core::ffi::c_int,
    pub mp4_verid: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncH263Param {
    pub h263_annexIEnable: ::core::ffi::c_int,
    pub h263_annexJEnable: ::core::ffi::c_int,
    pub h263_annexKEnable: ::core::ffi::c_int,
    pub h263_annexTEnable: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncAvcParam {
    pub avc_constrainedIntraPredFlag: ::core::ffi::c_int,
    pub avc_disableDeblk: ::core::ffi::c_int,
    pub avc_deblkFilterOffsetAlpha: ::core::ffi::c_int,
    pub avc_deblkFilterOffsetBeta: ::core::ffi::c_int,
    pub avc_chromaQpOffset: ::core::ffi::c_int,
    pub avc_audEnable: ::core::ffi::c_int,
    pub avc_fmoEnable: ::core::ffi::c_int,
    pub avc_fmoSliceNum: ::core::ffi::c_int,
    pub avc_fmoType: ::core::ffi::c_int,
    pub avc_fmoSliceSaveBufSize: ::core::ffi::c_int,
    pub nReserved: [::core::ffi::c_int; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VpuEncOpenParam {
    pub eFormat: VpuCodStd,
    pub nPicWidth: ::core::ffi::c_int,
    pub nPicHeight: ::core::ffi::c_int,
    pub nOrigWidth: ::core::ffi::c_int,
    pub nOrigHeight: ::core::ffi::c_int,
    pub nRotAngle: ::core::ffi::c_int,
    pub nFrameRate: ::core::ffi::c_int,
    pub nBitRate: ::core::ffi::c_int,
    pub nGOPSize: ::core::ffi::c_int,
    pub nColorConversionType: ::core::ffi::c_int,
    pub nStreamSliceCount: ::core::ffi::c_int,
    pub nChromaInterleave: ::core::ffi::c_int,
    pub sMirror: VpuEncMirrorDirection,
    pub nMapType: ::core::ffi::c_int,
    pub nLinear2TiledEnable: ::core::ffi::c_int,
    pub eColorFormat: VpuColorFormat,
    pub nUserQpMax: ::core::ffi::c_int,
    pub nUserQpMin: ::core::ffi::c_int,
    pub nUserQpMinEnable: ::core::ffi::c_int,
    pub nUserQpMaxEnable: ::core::ffi::c_int,
    pub nIntraRefresh: ::core::ffi::c_int,
    pub nRcIntraQp: ::core::ffi::c_int,
    pub nUserGamma: ::core::ffi::c_int,
    pub nRcIntervalMode: ::core::ffi::c_int,
    pub nMbInterval: ::core::ffi::c_int,
    pub nAvcIntra16x16OnlyModeEnable: ::core::ffi::c_int,
    pub sliceMode: VpuEncSliceMode,
    pub nInitialDelay: ::core::ffi::c_int,
    pub nVbvBufferSize: ::core::ffi::c_int,
    pub VpuEncStdParam: VpuEncOpenParam__bindgen_ty_1,
    pub nMESearchRange: ::core::ffi::c_int,
    pub nMEUseZeroPmv: ::core::ffi::c_int,
    pub nIntraCostWeight: ::core::ffi::c_int,
    pub nIsAvcc: ::core::ffi::c_int,
    pub sColorAspects: VpuIsoColorAspects,
    pub nReserved: [::core::ffi::c_int; 8usize],
    pub pAppCxt: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VpuEncOpenParam__bindgen_ty_1 {
    pub mp4Param: VpuEncMp4Param,
    pub h263Param: VpuEncH263Param,
    pub avcParam: VpuEncAvcParam,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VpuEncEncParam {
    pub eFormat: VpuCodStd,
    pub nPicWidth: ::core::ffi::c_int,
    pub nPicHeight: ::core::ffi::c_int,
    pub nFrameRate: ::core::ffi::c_int,
    pub nQuantParam: ::core::ffi::c_int,
    pub nInPhyInput: ::core::ffi::c_ulong,
    pub nInVirtInput: ::core::ffi::c_ulong,
    pub nInInputSize: ::core::ffi::c_int,
    pub nInPhyOutput: ::core::ffi::c_ulong,
    pub nInVirtOutput: ::core::ffi::c_ulong,
    pub nInOutputBufLen: ::core::ffi::c_uint,
    pub nForceIPicture: ::core::ffi::c_int,
    pub nSkipPicture: ::core::ffi::c_int,
    pub nEnableAutoSkip: ::core::ffi::c_int,
    pub eOutRetCode: VpuEncBufRetCode,
    pub nOutOutputSize: ::core::ffi::c_int,
    pub pInFrame: *mut VpuFrameBuffer,
    pub nReserved: [::core::ffi::c_int; 2usize],
    pub pPrivate: *mut ::core::ffi::c_void,
}
pub const VpuEncConfig_VPU_ENC_CONF_NONE: VpuEncConfig = 0;
pub const VpuEncConfig_VPU_ENC_CONF_BIT_RATE: VpuEncConfig = 1;
pub const VpuEncConfig_VPU_ENC_CONF_INTRA_REFRESH: VpuEncConfig = 2;
pub const VpuEncConfig_VPU_ENC_CONF_ENA_SPSPPS_IDR: VpuEncConfig = 3;
pub const VpuEncConfig_VPU_ENC_CONF_RC_INTRA_QP: VpuEncConfig = 4;
pub const VpuEncConfig_VPU_ENC_CONF_INTRA_REFRESH_MODE: VpuEncConfig = 5;
pub type VpuEncConfig = ::core::ffi::c_uint;
extern "C" {
    #[doc = " decoder APIs"]
    pub fn VPU_DecLoad() -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetVersionInfo(pOutVerInfo: *mut VpuVersionInfo) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetWrapperVersionInfo(pOutVerInfo: *mut VpuWrapperVersionInfo) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecQueryMem(pOutMemInfo: *mut VpuMemInfo) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecOpen(
        pOutHandle: *mut VpuDecHandle,
        pInParam: *mut VpuDecOpenParam,
        pInMemInfo: *mut VpuMemInfo,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetCapability(
        InHandle: VpuDecHandle,
        eInCapability: VpuDecCapability,
        pOutCapbility: *mut ::core::ffi::c_int,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecDisCapability(
        InHandle: VpuDecHandle,
        eInCapability: VpuDecCapability,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecConfig(
        InHandle: VpuDecHandle,
        InDecConf: VpuDecConfig,
        pInParam: *mut ::core::ffi::c_void,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecDecodeBuf(
        InHandle: VpuDecHandle,
        pInData: *mut VpuBufferNode,
        pOutBufRetCode: *mut ::core::ffi::c_int,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetInitialInfo(
        InHandle: VpuDecHandle,
        pOutInitInfo: *mut VpuDecInitInfo,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecRegisterFrameBuffer(
        InHandle: VpuDecHandle,
        pInFrameBufArray: *mut VpuFrameBuffer,
        nNum: ::core::ffi::c_int,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetOutputFrame(
        InHandle: VpuDecHandle,
        pOutFrameInfo: *mut VpuDecOutFrameInfo,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetConsumedFrameInfo(
        InHandle: VpuDecHandle,
        pOutFrameInfo: *mut VpuDecFrameLengthInfo,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecOutFrameDisplayed(
        InHandle: VpuDecHandle,
        pInFrameBuf: *mut VpuFrameBuffer,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecFlushAll(InHandle: VpuDecHandle) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecAllRegFrameInfo(
        InHandle: VpuDecHandle,
        ppOutFrameBuf: *mut *mut VpuFrameBuffer,
        pOutNum: *mut ::core::ffi::c_int,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetNumAvailableFrameBuffers(
        InHandle: VpuDecHandle,
        pOutBufNum: *mut ::core::ffi::c_int,
    ) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecClose(InHandle: VpuDecHandle) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecUnLoad() -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecReset(InHandle: VpuDecHandle) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetErrInfo(InHandle: VpuDecHandle, pErrInfo: *mut VpuDecErrInfo)
        -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecGetMem(pInOutMem: *mut VpuMemDesc) -> VpuDecRetCode;
}
extern "C" {
    pub fn VPU_DecFreeMem(pInMem: *mut VpuMemDesc) -> VpuDecRetCode;
}
extern "C" {
    #[doc = " encoder APIs"]
    pub fn VPU_EncLoad() -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncUnLoad() -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncReset(InHandle: VpuEncHandle) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncOpenSimp(
        pOutHandle: *mut VpuEncHandle,
        pInMemInfo: *mut VpuMemInfo,
        pInParam: *mut VpuEncOpenParamSimp,
    ) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncOpen(
        pOutHandle: *mut VpuEncHandle,
        pInMemInfo: *mut VpuMemInfo,
        pInParam: *mut VpuEncOpenParam,
    ) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncClose(InHandle: VpuEncHandle) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncGetInitialInfo(
        InHandle: VpuEncHandle,
        pOutInitInfo: *mut VpuEncInitInfo,
    ) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncGetVersionInfo(pOutVerInfo: *mut VpuVersionInfo) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncGetWrapperVersionInfo(pOutVerInfo: *mut VpuWrapperVersionInfo) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncRegisterFrameBuffer(
        InHandle: VpuEncHandle,
        pInFrameBufArray: *mut VpuFrameBuffer,
        nNum: ::core::ffi::c_int,
        nSrcStride: ::core::ffi::c_int,
    ) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncQueryMem(pOutMemInfo: *mut VpuMemInfo) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncGetMem(pInOutMem: *mut VpuMemDesc) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncFreeMem(pInMem: *mut VpuMemDesc) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncConfig(
        InHandle: VpuEncHandle,
        InEncConf: VpuEncConfig,
        pInParam: *mut ::core::ffi::c_void,
    ) -> VpuEncRetCode;
}
extern "C" {
    pub fn VPU_EncEncodeFrame(
        InHandle: VpuEncHandle,
        pInOutParam: *mut VpuEncEncParam,
    ) -> VpuEncRetCode;
}
